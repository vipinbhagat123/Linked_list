# Delete at beginning

class Node:
    def __init__(self, data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    
    def insert_at_end(self, data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=new_node
    
    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.next=self.head
        self.head=new_node
    
    def delete_beginning(self):     ## Delete at beginning
        if self.head is None:
            print("list is empty")
            return
        self.head=self.head.next
        
    def delete_node(self, value):
        if self.head is None:
            return
        
        if self.head.data==value:
            self.head = self.head.next
            return
        prev=self.head
        current=self.head.next
        while current:
            if current.data==value:
                prev.next=curren.next
                return
            prev=current
            current=current.next
    
    
    def print_list(self):
        temp=self.head
        while temp:
            print(temp.data, end='-->')
            temp=temp.next
        print("None")
        
l1=LinkedList()
l1.insert_at_end(10)
l1.insert_at_end(20)
l1.insert_at_end(30)
l1.insert_at_end(40)
l1.insert_at_end(50)
l1.insert_at_beginning(2)
l1.insert_at_beginning(4)
l1.insert_at_beginning(6)
l1.insert_at_beginning(8)
l1.delete_node(8)
l1.delete_beginning()
l1.print_list()


        
        